# Generated by Django 3.1.7 on 2021-03-24 11:52

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Currencies',
            fields=[
                ('currencyid', models.AutoField(db_column='CurrencyID', primary_key=True, serialize=False)),
                ('descriptive', models.CharField(db_column='Descriptive', max_length=16)),
                ('comments', models.CharField(db_column='Comments', max_length=45)),
                ('dimmensions_currency_symbol', models.CharField(max_length=4)),
            ],
            options={
                'db_table': 'currencies',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MasterCurrencies',
            fields=[
                ('mstr_cur_id', models.AutoField(primary_key=True, serialize=False)),
                ('from_currency_id', models.PositiveIntegerField()),
                ('to_currency_id', models.PositiveIntegerField()),
                ('exchange_rate', models.FloatField()),
            ],
            options={
                'db_table': 'master_currencies',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ProductRecords',
            fields=[
                ('product_code', models.CharField(max_length=64, primary_key=True, serialize=False)),
                ('supplier_product_code', models.CharField(blank=True, max_length=64, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('long_description', models.TextField(blank=True, null=True)),
                ('packsize', models.CharField(blank=True, max_length=256, null=True)),
                ('purchase_nett_price', models.FloatField(blank=True, null=True)),
                ('supplier_list_price', models.FloatField(blank=True, null=True)),
                ('sell_price_gbp', models.FloatField(blank=True, null=True)),
                ('sell_price_eur', models.FloatField(blank=True, null=True)),
                ('sell_price_chf', models.FloatField(blank=True, null=True)),
                ('sell_price_usd', models.FloatField(blank=True, null=True)),
                ('storage_conditions', models.TextField(blank=True, null=True)),
                ('shipping_temperature', models.TextField(blank=True, null=True)),
                ('commodity_code', models.TextField(blank=True, null=True)),
                ('category_1', models.IntegerField(blank=True, null=True)),
                ('category_2', models.IntegerField(blank=True, null=True)),
                ('research_area_1', models.IntegerField(blank=True, null=True)),
                ('research_area_2', models.IntegerField(blank=True, null=True)),
                ('research_area_3', models.IntegerField(blank=True, null=True)),
                ('research_area_4', models.IntegerField(blank=True, null=True)),
                ('supplier_category_1', models.TextField(blank=True, null=True)),
                ('supplier_category_2', models.TextField(blank=True, null=True)),
                ('supplier_category_3', models.TextField(blank=True, null=True)),
                ('supplier_lead_time', models.TextField(blank=True, null=True)),
                ('ct_supplier_id', models.IntegerField(blank=True, null=True)),
                ('delete_flag', models.IntegerField(blank=True, null=True)),
                ('listing_precedence', models.IntegerField(blank=True, null=True)),
                ('last_updated_user', models.CharField(blank=True, max_length=64, null=True)),
                ('last_change_date', models.DateTimeField(blank=True, null=True)),
                ('price_calculation_type', models.PositiveIntegerField(blank=True, null=True)),
                ('website_flag', models.IntegerField(blank=True, null=True)),
                ('new_product_flag', models.IntegerField(blank=True, null=True)),
                ('previous_purchase_price', models.FloatField(blank=True, null=True)),
                ('price_change_flag', models.IntegerField(blank=True, null=True)),
                ('price_change_percent', models.FloatField(blank=True, null=True)),
                ('is_in_website', models.IntegerField(blank=True, null=True)),
                ('is_in_odoo', models.IntegerField(blank=True, null=True)),
                ('special_shipping', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'db_table': 'product_records',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ProductRecordsTech',
            fields=[
                ('product_code', models.CharField(max_length=64, primary_key=True, serialize=False)),
                ('species', models.TextField(blank=True, null=True)),
                ('tissue_type', models.TextField(blank=True, null=True)),
                ('disease', models.TextField(blank=True, null=True)),
                ('format_of_drug', models.TextField(blank=True, db_column='format', null=True, verbose_name='Format')),
                ('cell_line', models.TextField(blank=True, null=True)),
                ('accession_no', models.TextField(blank=True, null=True)),
                ('gene_id', models.TextField(blank=True, null=True)),
                ('gene_symbol', models.TextField(blank=True, null=True)),
                ('gene_synonyms', models.TextField(blank=True, null=True)),
                ('gene_description', models.TextField(blank=True, null=True)),
                ('locus_id', models.TextField(blank=True, null=True)),
                ('protein_families', models.TextField(blank=True, null=True)),
                ('protein_pathways', models.TextField(blank=True, null=True)),
                ('vector', models.TextField(blank=True, null=True)),
                ('tag', models.TextField(blank=True, null=True)),
                ('sequence_data', models.TextField(blank=True, null=True)),
                ('aa_sequence', models.TextField(blank=True, null=True)),
                ('application', models.TextField(blank=True, null=True)),
                ('cas_no', models.TextField(blank=True, null=True)),
                ('selection_marker', models.TextField(blank=True, null=True)),
                ('promoter', models.TextField(blank=True, null=True)),
                ('tag_position', models.TextField(blank=True, null=True)),
                ('purification', models.TextField(blank=True, null=True)),
                ('vector_type', models.TextField(blank=True, null=True)),
                ('sample_type', models.TextField(blank=True, null=True)),
                ('concentration', models.TextField(blank=True, null=True)),
                ('bead_size', models.TextField(blank=True, null=True)),
                ('cell_type', models.TextField(blank=True, null=True)),
                ('host_species', models.TextField(blank=True, null=True)),
                ('species_reactivity', models.TextField(blank=True, null=True)),
                ('immunogen', models.TextField(blank=True, null=True)),
                ('isotype', models.TextField(blank=True, null=True)),
                ('clone_number', models.TextField(blank=True, null=True)),
                ('formulation', models.TextField(blank=True, null=True)),
                ('preservative', models.TextField(blank=True, null=True)),
                ('label_conjugate', models.TextField(blank=True, null=True)),
                ('clonality', models.TextField(blank=True, null=True)),
                ('type_of_drug', models.TextField(blank=True, db_column='type', null=True, verbose_name='Type')),
                ('epitope', models.TextField(blank=True, null=True)),
                ('target', models.TextField(blank=True, null=True)),
                ('uniprot_id', models.TextField(blank=True, null=True)),
                ('expression_host', models.TextField(blank=True, null=True)),
                ('predicted_mw', models.TextField(blank=True, null=True)),
                ('determined_mw', models.TextField(blank=True, null=True)),
                ('activity', models.TextField(blank=True, null=True)),
                ('purity', models.TextField(blank=True, null=True)),
                ('endotoxin', models.TextField(blank=True, null=True)),
                ('labeling_method', models.TextField(blank=True, null=True)),
                ('target_specificity', models.TextField(blank=True, null=True)),
                ('components', models.TextField(blank=True, null=True)),
                ('preparation', models.TextField(blank=True, null=True)),
                ('protocol_usage', models.TextField(blank=True, null=True)),
                ('dimensions', models.TextField(blank=True, null=True)),
                ('serotype', models.TextField(blank=True, null=True)),
                ('protein_type', models.TextField(blank=True, null=True)),
                ('protein', models.TextField(blank=True, null=True)),
                ('mycoplasma_testing', models.TextField(blank=True, null=True)),
                ('license_requirement', models.TextField(blank=True, null=True)),
                ('expression', models.TextField(blank=True, null=True)),
                ('tumorigenic', models.TextField(blank=True, null=True)),
                ('mw', models.TextField(blank=True, null=True)),
                ('alternative_names', models.TextField(blank=True, null=True)),
                ('activity_definition', models.TextField(blank=True, null=True)),
                ('carbohydrate_type', models.TextField(blank=True, null=True)),
                ('oligosaccharide_length', models.TextField(blank=True, null=True)),
                ('detection_range', models.TextField(blank=True, null=True)),
                ('sensitivity', models.TextField(blank=True, null=True)),
                ('elisa_format', models.TextField(blank=True, null=True)),
                ('cross_reactivity', models.TextField(blank=True, null=True)),
                ('specificity', models.TextField(blank=True, null=True)),
                ('assay_time', models.TextField(blank=True, null=True)),
                ('intra_assay_cv', models.TextField(blank=True, null=True)),
                ('inter_assay_cv', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'product_records_tech',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DataOwners',
            fields=[
                ('dat_id', models.AutoField(primary_key=True, serialize=False)),
                ('owner', models.CharField(db_column='Owner', max_length=64)),
                ('supplierpurchasecurrency', models.CharField(blank=True, db_column='SupplierPurchaseCurrency', max_length=4, null=True)),
                ('productpurchasebrand', models.PositiveIntegerField(blank=True, db_column='ProductPurchaseBrand', null=True)),
                ('productsellingbrand', models.PositiveIntegerField(blank=True, db_column='ProductSellingBrand', null=True)),
                ('dimmensionssuppliercode', models.CharField(blank=True, db_column='DimmensionsSupplierCode', max_length=10, null=True)),
                ('dimmensionsproductgroup', models.PositiveIntegerField(blank=True, db_column='DimmensionsProductGroup', null=True)),
                ('msaccessdatid', models.PositiveIntegerField(blank=True, db_column='MsAccessDatId', null=True)),
                ('datasheetsuffix', models.CharField(blank=True, db_column='DatasheetSuffix', max_length=4, null=True)),
                ('logo_url', models.CharField(blank=True, max_length=128, null=True)),
                ('web_site_sql_id', models.PositiveIntegerField(blank=True, null=True)),
                ('precedence_listing', models.PositiveIntegerField(blank=True, null=True)),
                ('web_site_url', models.CharField(blank=True, max_length=45, null=True)),
                ('ik_flag_id', models.PositiveIntegerField(blank=True, null=True)),
                ('currencyid', models.PositiveIntegerField(blank=True, null=True)),
                ('usa_market_flag_id', models.PositiveIntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'data_owners',
            },
        ),
    ]
